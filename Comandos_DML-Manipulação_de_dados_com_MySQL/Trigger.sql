/* OBSERVAÇÃO IMPORTANTE NA CRIAÇÃO TRIGGER*/
/* É uma boa prática usar Triggers associadas a Stored Procedures de modo que, em eventuais mudanças no código, as triggers que chamam a procedure alteram de uma vez */

/* CRIAÇÃO DA TAB_FATURAMENTO QUE RECEBERÁ OS DADOS DO TRIGGER*/

CREATE TABLE TAB_FATURAMENTO
(DATA_VENDA DATE NULL, TOTAL_VENDA FLOAT);

SELECT * FROM TAB_FATURAMENTO;


/* COMANDOS DE INSERT PARA EXECUÇÃO DO TRIGGER */

INSERT INTO NOTAS (NUMERO, DATA_VENDA, CPF, MATRICULA, IMPOSTO)
VALUES ('0100', '2019-02-02', '1471156710', '235', 0.10);
INSERT INTO itens_notas (NUMERO, CODIGO, QUANTIDADE, PRECO)
VALUES ('0100', '1000889', 100, 10);
INSERT INTO itens_notas (NUMERO, CODIGO, QUANTIDADE, PRECO)
VALUES ('0100', '1002334', 100, 10);

INSERT INTO NOTAS (NUMERO, DATA_VENDA, CPF, MATRICULA, IMPOSTO)
VALUES ('0101', '2019-02-02', '1471156710', '235', 0.10);
INSERT INTO itens_notas (NUMERO, CODIGO, QUANTIDADE, PRECO)
VALUES ('0101', '1000889', 200, 10);
INSERT INTO itens_notas (NUMERO, CODIGO, QUANTIDADE, PRECO)
VALUES ('0101', '1002334', 200, 10);

SELECT * FROM ITENS_NOTAS;
SELECT * FROM NOTAS;

/* VENDO RESULTADO DO TRIGGER APÓS COMANDO INSERT */

SELECT * FROM TAB_FATURAMENTO;


/* EXEMPLO DE USO DO TRIGGER ANTES (COMANDO BEFORE) */

DELIMITER//
CREATE TRIGGER nome_do_trigger
    BEFORE INSERT
    ON nome_da_tabela FOR EACH ROW
BEGIN
-- codigo_a_ser_executado
END//


DELIMITER //

CREATE TRIGGER TG_CLIENTES_IDADE_INSERT BEFORE INSERT ON CLIENTES

FOR EACH ROW

BEGIN

SET NEW.IDADE = timestampdiff(YEAR, NEW.DATA_NASCIMENTO, NOW());

END //


/* COMANDO TRIGGER PARA AS AÇÕES DE INSERT ACIMA */

DELIMITER //
CREATE TRIGGER TG_CALC_FATURAMENTO_INSERT AFTER INSERT ON itens_notas
FOR EACH ROW BEGIN
	DELETE FROM TAB_FATURAMENTO;
    INSERT INTO TAB_FATURAMENTO
    SELECT A.DATA_VENDA, SUM(B.QUANTIDADE * B.PRECO) AS TOTAL_VENDA FROM NOTAS A INNER JOIN itens_notas B
    ON A.NUMERO = B.NUMERO
    GROUP BY A.DATA_VENDA;
END //

/* COMANDO TRIGGER PARA AS AÇÕES DE UPDATE */

DELIMITER //
CREATE TRIGGER TG_CALC_FATURAMENTO_UPDATE AFTER UPDATE ON itens_notas
FOR EACH ROW BEGIN
	DELETE FROM TAB_FATURAMENTO;
    INSERT INTO TAB_FATURAMENTO
    SELECT A.DATA_VENDA, SUM(B.QUANTIDADE * B.PRECO) AS TOTAL_VENDA FROM NOTAS A INNER JOIN itens_notas B
    ON A.NUMERO = B.NUMERO
    GROUP BY A.DATA_VENDA;
END //

/* COMANDO TRIGGER PARA AS AÇÕES DE DELETE */

DELIMITER //
CREATE TRIGGER TG_CALC_FATURAMENTO_DELETE AFTER DELETE ON itens_notas
FOR EACH ROW BEGIN
	DELETE FROM TAB_FATURAMENTO;
    INSERT INTO TAB_FATURAMENTO
    SELECT A.DATA_VENDA, SUM(B.QUANTIDADE * B.PRECO) AS TOTAL_VENDA FROM NOTAS A INNER JOIN itens_notas B
    ON A.NUMERO = B.NUMERO
    GROUP BY A.DATA_VENDA;
END //


/* COMO EXCLUIR UM TRIGGER*/

DROP TRIGGER TG_CALC_FATURAMENTO_INSERT;

